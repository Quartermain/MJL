

// Grid column
// 
// 
// $grid-columns:              12 !default;
//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width:         20px !default;

$grid-columns:              12 !default;
//** Point at which the navbar becomes uncollapsed.


.grid-multi {
  margin-left: -$grid-gutter-width/2;
  margin-right: -$grid-gutter-width/2;
  @include clearfix;
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".grid-xs-#{$i}, .grid-sm-#{$i}, .grid-md-#{$i}, .grid-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .grid-xs-#{$i}, .grid-sm-#{$i}, .grid-md-#{$i}, .grid-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns-nospace($i: 1, $list: ".grid-xs-#{$i}, .grid-sm-#{$i}, .grid-md-#{$i}, .grid-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .grid-xs-#{$i}, .grid-sm-#{$i}, .grid-md-#{$i}, .grid-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".grid-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .grid-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .grid-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
}

// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;

// Columns
//
// Common styles for small and large grid columns no padding

@include make-grid-columns-nospace;


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: 768px) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: 992px) {
  @include make-grid(md);
}



// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
@media (min-width: 1200px) {
  @include make-grid(lg);
}



.no-gutter {
  margin-left: 0;
  margin-right: 0;

  > [class*='col-'] { 
    padding-right:0; 
    padding-left:0;
  }
  
  > [class*='grid-'] {
    padding-right:0; 
    padding-left:0;
    margin-left: 0;
    margin-right: 0;
  }
}

.no-gutter-container{ padding-right:0; padding-left:0; }
